if (dim(A[[i]])[1] != dim(C[[group_X]])[1]){
stop("matrix A do not fit with matrix C")
}
if (dim(B[[i]])[2] == dim(C[[group_X]])[2]){
stop("matrix B do not fit with matrix C")
}
dim_X[,mod_X] <- c(dim(A[[i]])[2],dim(B[[i]])[1])
}
return(dim_X)
}
dimCalculator(A,B,C)
B
C
dimCalculator <- function(A,B,C){
len <- length(C)
dim_X <- matrix(0,2,len)
for (i in 1: len^2){
mod_X <- (i-1)%%len+1
group_X <- (i-1)%/%len+1
if (dim(A[[i]])[1] != dim(C[[group_X]])[1]){
stop("matrix A do not fit with matrix C")
}
if (dim(B[[i]])[2] != dim(C[[group_X]])[2]){
stop("matrix B do not fit with matrix C")
}
dim_X[,mod_X] <- c(dim(A[[i]])[2],dim(B[[i]])[1])
}
return(dim_X)
}
dimCalculator(A,B,C)
dim_X[,mod_X] !=  c(dim(A[[i]])[2],dim(B[[i]])[1])
a <-c(1,2)
b <- c(1,3)
a != b
all.equal(a,b)
dimCalculator <- function(A,B,C){
len <- length(C)
dim_X <- matrix(0,2,len)
for (i in 1: len^2){
mod_X <- (i-1)%%len+1
group_X <- (i-1)%/%len+1
if (dim(A[[i]])[1] != dim(C[[group_X]])[1]){
stop("matrix A do not fit with matrix C")
}
if (dim(B[[i]])[2] != dim(C[[group_X]])[2]){
stop("matrix B do not fit with matrix C")
}
if (i <= len){
dim_X[,mod_X] <- c(dim(A[[i]])[2],dim(B[[i]])[1])
}else{
if (all.equal(dim_X[,mod_X],c(dim(A[[i]])[2],dim(B[[i]])[1]))){
return(i)
}
}
}
return(dim_X)
}
dimCalculator(A,B,C)
dimCalculator <- function(A,B,C){
len <- length(C)
dim_X <- matrix(0,2,len)
for (i in 1: len^2){
mod_X <- (i-1)%%len+1
group_X <- (i-1)%/%len+1
if (dim(A[[i]])[1] != dim(C[[group_X]])[1]){
stop("matrix A do not fit with matrix C")
}
if (dim(B[[i]])[2] != dim(C[[group_X]])[2]){
stop("matrix B do not fit with matrix C")
}
if (i <= len){
dim_X[,mod_X] <- c(dim(A[[i]])[2],dim(B[[i]])[1])
}else{
if (!all.equal(dim_X[,mod_X],c(dim(A[[i]])[2],dim(B[[i]])[1]))){
stop("Matrix pair A1 and B1 do not fit with Matrix pair A",i, " and B",i)
}
}
}
return(dim_X)
}
dimCalculator(A,B,C)
myX <- vector("list",length = 5)
myX
general_CG <- function(A,B,C,tol= 1e-20,max.iter = 10000){
if (length(A) != length(B) | length(C)^2 != length(A)){
stop("Please Check the number of matrixes of A, B and C!")
}
dim_X <- dimCalculator(A,B,C)
X <- vector("list",length = dim(dim_X)[2])
for (i in 1:length(X)) {
X[[i]] <- matrix(0,dim_X[1,i],dim_X[2,i])
}
zeros_X <- X
save_sum <- C
length_A <- length(A)
length_X <- sqrt(length_A)
for (i in 1:length_A){
mod_X <- (i-1)%%length_X+1
group_X <- (i-1)%/%length_X+1
test <- A[[i]]%*%X[[mod_X]]%*%B[[i]]
save_sum[[group_X]] <- save_sum[[group_X]] - test
}
R1 <- unlist(save_sum)
prepare <- rep(X,length_X)
p <- X
for (i in 1:length_A){
group_X <- (i-1)%/%length_X+1
mod_X <- (i-1)%%length_X+1
prepare[[i]] <-crossprod(A[[i]],save_sum[[group_X]]%*%t(B[[i]]))
p[[mod_X]] <- p[[mod_X]] + prepare[[i]]
}
## Step 5
new_X <- zeros_X
for (iter in 1:max.iter){
for (i in 1:length_X){
new_X[[i]] <- X[[i]] + sum(R1^2)/sum(unlist(p)^2)*p[[i]]
}
new_save_sum <- C
for (i in 1:length_A){
mod_X <- (i-1)%%length_X+1
group_X <- (i-1)%/%length_X+1
test <- A[[i]]%*%new_X[[mod_X]]%*%B[[i]]
new_save_sum[[group_X]] <- new_save_sum[[group_X]] - test
}
new_R <- unlist(new_save_sum)
for (i in 1:length_X){
p[[i]] <- sum(new_R^2)/sum(R1^2)*p[[i]]
}
prepare <- rep(zeros_X,length_X)
for (i in 1:length_A){
group_X <- (i-1)%/%length_X+1
mod_X <- (i-1)%%length_X+1
prepare[[i]] <-crossprod(A[[i]],new_save_sum[[group_X]]%*%t(B[[i]]))
p[[mod_X]] <- p[[mod_X]] + prepare[[i]]
}
if (sum(new_R^2)/length(new_R)<tol){
break
}
X <- new_X
save_sum <- new_save_sum
R1 <- new_R
}
return(X)
}
dimCalculator <- function(A,B,C){
len <- length(C)
dim_X <- matrix(0,2,len)
for (i in 1: len^2){
mod_X <- (i-1)%%len+1
group_X <- (i-1)%/%len+1
if (dim(A[[i]])[1] != dim(C[[group_X]])[1]){
stop("matrix A do not fit with matrix C")
}
if (dim(B[[i]])[2] != dim(C[[group_X]])[2]){
stop("matrix B do not fit with matrix C")
}
if (i <= len){
dim_X[,mod_X] <- c(dim(A[[i]])[2],dim(B[[i]])[1])
}else{
if (!all.equal(dim_X[,mod_X],c(dim(A[[i]])[2],dim(B[[i]])[1]))){
stop("Matrix pair A1 and B1 do not fit with Matrix pair A",i, " and B",i)
}
}
}
return(dim_X)
}
general_CG(A,B,C)
dimCalculator <- function(A,B,C){
len <- length(C)
dim_X <- matrix(0,2,len)
for (i in 1: len^2){
mod_X <- (i-1)%%len+1
group_X <- (i-1)%/%len+1
if (dim(A[[i]])[1] != dim(C[[group_X]])[1]){
stop("matrix A do not fit with matrix C")
}
if (dim(B[[i]])[2] == dim(C[[group_X]])[2]){
stop("matrix B do not fit with matrix C")
}
if (i <= len){
dim_X[,mod_X] <- c(dim(A[[i]])[2],dim(B[[i]])[1])
}else{
if (!all.equal(dim_X[,mod_X],c(dim(A[[i]])[2],dim(B[[i]])[1]))){
stop("Matrix pair A1 and B1 do not fit with Matrix pair A",i, " and B",i)
}
}
}
return(dim_X)
}
general_CG(A,B,C)
library(devtools)
document()
document()
check()
build()
source('D:/Courses/BIOS615/Final_Package/coupledMatrixSolve/R/Algr2_1.R', echo=TRUE)
document()
document()
check()
check()
check()
document()
check()
.Last.error.trace
check()
Rlinsolve::lsolve.cg
function (A, B, xinit = NA, reltol = 1e-05, maxiter = 10000,
preconditioner = diag(ncol(A)), adjsym = TRUE, verbose = TRUE)
{
if (verbose) {
message("* lsolve.cg : Initialiszed.")
}
if (any(is.na(A)) || any(is.infinite(A)) || any(is.na(B)) ||
any(is.infinite(B))) {
stop("* lsolve.cg : no NA or Inf values allowed.")
}
sparseformats = c("dgCMatrix", "dtCMatrix", "dsCMatrix")
if (aux.is.sparse(A) || aux.is.sparse(B) || aux.is.sparse(preconditioner)) {
A = Matrix(A, sparse = TRUE)
B = Matrix(B, sparse = TRUE)
preconditioner = Matrix(preconditioner, sparse = TRUE)
sparseflag = TRUE
}
else {
A = matrix(A, nrow = nrow(A))
if (is.vector(B)) {
B = matrix(B)
}
else {
B = matrix(B, nrow = nrow(B))
}
preconditioner = matrix(preconditioner, nrow = nrow(preconditioner))
sparseflag = FALSE
}
if (length(xinit) == 1) {
if (is.na(xinit)) {
xinit = matrix(rnorm(ncol(A)))
}
else {
stop("* lsolve.cg : please use a valid 'xinit'.")
}
}
else {
if (length(xinit) != ncol(A)) {
stop("* lsolve.cg : 'xinit' has invalid size.")
}
xinit = matrix(xinit)
}
if (any(is.infinite(A)) || any(is.na(A)) || any(is.infinite(B)) ||
any(is.na(B))) {
stop("* lsolve.cg : no NA, Inf, -Inf values are allowed.")
}
m = nrow(A)
if (is.vector(B)) {
mB = length(B)
if (m != mB) {
stop("* lsolve.cg : a vector B should have a length of nrow(A).")
}
}
else {
mB = nrow(B)
if (m != mB) {
stop("* lsolve.cg : an input matrix B should have the same number of rows from A.")
}
}
if (is.vector(B)) {
B = as.matrix(B)
}
if (m > ncol(A)) {
B = t(A) %*% B
A = t(A) %*% A
}
else if (m < ncol(A)) {
stop("* lsolve.cg : underdetermined case is not supported.")
}
else {
if (norm(abs(t(A) - A), "f") > 1e-10) {
if (verbose) {
message("* lsolve.cg : A may not be symmetric.")
}
if (adjsym) {
B = t(A) %*% B
A = t(A) %*% A
if (verbose) {
message("* lsolve.cg : making it normal equation form via 'adjsym' flag.")
}
}
}
}
if (!all.equal(dim(A), dim(preconditioner))) {
stop("* lsolve.cg : Preconditioner is a size-matching.")
}
if (verbose) {
message("* lsolve.cg : preprocessing finished ...")
}
ncolB = ncol(B)
if (ncolB == 1) {
if (!sparseflag) {
vecB = as.vector(B)
res = linsolve.cg.single(A, vecB, xinit, reltol,
maxiter, preconditioner)
}
else {
vecB = B
res = linsolve.cg.single.sparse(A, vecB, xinit, reltol,
maxiter, preconditioner)
}
}
else {
x = array(0, c(ncol(A), ncolB))
iter = array(0, c(1, ncolB))
errors = list()
for (i in 1:ncolB) {
if (!sparseflag) {
vecB = as.vector(B[, i])
tmpres = linsolve.cg.single(A, vecB, xinit, reltol,
maxiter, preconditioner)
}
else {
vecB = Matrix(B[, i], sparse = TRUE)
tmpres = linsolve.cg.single.sparse(A, vecB, xinit,
reltol, maxiter, preconditioner)
}
x[, i] = tmpres$x
iter[i] = tmpres$iter
errors[[i]] = tmpres$errors
if (verbose) {
message(paste("* lsolve.cg : B's column.",
i, "being processed.."))
}
}
res = list(x = x, iter = iter, errors = errors)
}
if ("flag" %in% names(res)) {
flagval = res$flag
if (flagval == 0) {
if (verbose) {
message("* lsolve.cg : convergence was well achieved.")
}
}
else {
if (verbose) {
message("* lsolve.cg : convergence was not achieved within maxiter.")
}
}
res$flag = NULL
}
if (verbose) {
message("* lsolve.cg : computations finished.")
}
return(res)
}
myCG <- function (A, B, xinit = NA, reltol = 1e-05, maxiter = 10000,
preconditioner = diag(ncol(A)), adjsym = TRUE, verbose = TRUE)
{
if (verbose) {
message("* lsolve.cg : Initialiszed.")
}
if (any(is.na(A)) || any(is.infinite(A)) || any(is.na(B)) ||
any(is.infinite(B))) {
stop("* lsolve.cg : no NA or Inf values allowed.")
}
sparseformats = c("dgCMatrix", "dtCMatrix", "dsCMatrix")
if (aux.is.sparse(A) || aux.is.sparse(B) || aux.is.sparse(preconditioner)) {
A = Matrix(A, sparse = TRUE)
B = Matrix(B, sparse = TRUE)
preconditioner = Matrix(preconditioner, sparse = TRUE)
sparseflag = TRUE
}
else {
A = matrix(A, nrow = nrow(A))
if (is.vector(B)) {
B = matrix(B)
}
else {
B = matrix(B, nrow = nrow(B))
}
preconditioner = matrix(preconditioner, nrow = nrow(preconditioner))
sparseflag = FALSE
}
if (length(xinit) == 1) {
if (is.na(xinit)) {
xinit = matrix(rnorm(ncol(A)))
}
else {
stop("* lsolve.cg : please use a valid 'xinit'.")
}
}
else {
if (length(xinit) != ncol(A)) {
stop("* lsolve.cg : 'xinit' has invalid size.")
}
xinit = matrix(xinit)
}
if (any(is.infinite(A)) || any(is.na(A)) || any(is.infinite(B)) ||
any(is.na(B))) {
stop("* lsolve.cg : no NA, Inf, -Inf values are allowed.")
}
m = nrow(A)
if (is.vector(B)) {
mB = length(B)
if (m != mB) {
stop("* lsolve.cg : a vector B should have a length of nrow(A).")
}
}
else {
mB = nrow(B)
if (m != mB) {
stop("* lsolve.cg : an input matrix B should have the same number of rows from A.")
}
}
if (is.vector(B)) {
B = as.matrix(B)
}
if (m > ncol(A)) {
B = t(A) %*% B
A = t(A) %*% A
}
else if (m < ncol(A)) {
stop("* lsolve.cg : underdetermined case is not supported.")
}
else {
if (norm(abs(t(A) - A), "f") > 1e-10) {
if (verbose) {
message("* lsolve.cg : A may not be symmetric.")
}
if (adjsym) {
B = t(A) %*% B
A = t(A) %*% A
if (verbose) {
message("* lsolve.cg : making it normal equation form via 'adjsym' flag.")
}
}
}
}
if (!all.equal(dim(A), dim(preconditioner))) {
stop("* lsolve.cg : Preconditioner is a size-matching.")
}
if (verbose) {
message("* lsolve.cg : preprocessing finished ...")
}
ncolB = ncol(B)
if (ncolB == 1) {
if (!sparseflag) {
vecB = as.vector(B)
res = linsolve.cg.single(A, vecB, xinit, reltol,
maxiter, preconditioner)
}
else {
vecB = B
res = linsolve.cg.single.sparse(A, vecB, xinit, reltol,
maxiter, preconditioner)
}
}
else {
x = array(0, c(ncol(A), ncolB))
iter = array(0, c(1, ncolB))
errors = list()
for (i in 1:ncolB) {
if (!sparseflag) {
vecB = as.vector(B[, i])
tmpres = linsolve.cg.single(A, vecB, xinit, reltol,
maxiter, preconditioner)
}
else {
vecB = Matrix(B[, i], sparse = TRUE)
tmpres = linsolve.cg.single.sparse(A, vecB, xinit,
reltol, maxiter, preconditioner)
}
x[, i] = tmpres$x
iter[i] = tmpres$iter
errors[[i]] = tmpres$errors
if (verbose) {
message(paste("* lsolve.cg : B's column.",
i, "being processed.."))
}
}
res = list(x = x, iter = iter, errors = errors)
}
if ("flag" %in% names(res)) {
flagval = res$flag
if (flagval == 0) {
if (verbose) {
message("* lsolve.cg : convergence was well achieved.")
}
}
else {
if (verbose) {
message("* lsolve.cg : convergence was not achieved within maxiter.")
}
}
res$flag = NULL
}
if (verbose) {
message("* lsolve.cg : computations finished.")
}
return(res)
}
Rlinsolve:::aux.is.sparse
sparse_identifier <- function (AA)
{
sparseformats = c("dgCMatrix", "dtCMatrix", "dsCMatrix")
for (i in 1:3) {
if (inherits(AA, sparseformats[i])) {
return(TRUE)
}
}
return(FALSE)
}
library(Matrix)
Rlinsolve:::linsolve.cg.single.sparse
.libPaths()
